name: Upload to PyPI

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  build_sdist:
    name: Make source distribution
    runs-on:  ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine cython numpy 
      - name: Build sdist source and install
        run: |
          python setup.py sdist 
          echo "Running pip install from sdist"
          python -m pip install dist/*.tar.gz --user
      - name: Check dists
        run: |
          twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
  build_wheels:
    strategy:
      matrix:
        include:
          - config: {"name": "Linux", "os": "ubuntu-latest", "arch": "x86_64"}
          - config: {"name": "Linux", "os": "ubuntu-latest", "arch": "aarch64"}
          - config: {"name": "macOS", "os": "macos-14", "arch": "x86_64"}
          - config: {"name": "macOS", "os": "macos-14", "arch": "arm64"}
          - config: {"name": "Windows", "os": "windows-latest", "arch": "AMD64"}  
    name: Build wheels for ${{ matrix.config.os }} ${{ matrix.config.arch }}
    env: 
      CIBW_ARCHS: ${{ matrix.config.arch }}
    runs-on: ${{ matrix.config.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.13.0
      - name: set additional environment variables for macOS arm
        if: runner.name == 'macOS' && matrix.config.arch == 'arm64'
        run: |
          echo "CIBW_ARCHS_MACOS=arm64" >> $GITHUB_ENV
          echo "ARCHFLAGS='-arch arm64'" >> $GITHUB_ENV
      - name: set additional environment variables for macOS x86
        if: runner.name == 'macOS' && matrix.config.arch == 'x86_64'
        run: |
          echo "CIBW_ARCHS_MACOS=x86_64" >> $GITHUB_ENV
          echo "ARCHFLAGS='-arch x86_64'" >> $GITHUB_ENV
      - name: Set up QEMU for arm64 builds
        if: matrix.config.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Display Python Version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine cython numpy cibuildwheel
      - name: Build wheels
        timeout-minutes: 120
        run: |
          env | grep CIBW
          env | grep ARCH
          python -m cibuildwheel --output-dir wheelhouse
      - name: Check dists
        run: |
          twine check wheelhouse/*
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.config.os }}-${{ matrix.config.arch }}
          path: ./wheelhouse/*.whl
  publish_to_pypi:
    name: Publish to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          merge-multiple: true
          path: dist
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine 
      - name: Check dists
        run: |
          twine check dist/*
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload --non-interactive --skip-existing dist/*
